<?php

namespace App\Models;

use App\Models\Admin\ApplyJob;
use App\Models\Admin\JobPost;
use App\Models\Admin\Skill;
use App\Models\Admin\TradeLicenseFile;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Jetstream\HasProfilePhoto;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens;
    use HasFactory;
    use HasProfilePhoto;
    use Notifiable;
    use TwoFactorAuthenticatable;

    private static $user, $users, $userDetails;

    /**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'user_details_id',
        'user_role_type',
        'account_type',
        'submit_status'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
        'two_factor_recovery_codes',
        'two_factor_secret',
        'profile_photo_url'
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'profile_photo_url',
    ];

    public static function updateUser($request, $id)
    {
//        $user = User::find($id)->update([
//            'name'  => $request->name,
//            'email'  => $request->email,
//        ]);
        $user   = User::find($id);
        $user->name     = $request->name;
        $user->email     = $request->email;
        $user->save();
//        $user->roles()->detech();
        $user->roles()->sync($request->roles);
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($user){
            $user->userDetails->delete();
            if (!empty($user->tradeLicenseFiles))
            {
                foreach ($user->tradeLicenseFiles as $tradeLicenseFile)
                {
                    if (file_exists($tradeLicenseFile->file_url))
                    {
                        unlink($tradeLicenseFile->file_url);
                    }
                    $tradeLicenseFile->delete();
                }
            }

            if (!empty($user->jobPosts))
            {
                foreach ($user->jobPosts as $jobPost)
                {
                    if (!empty($jobPost->jobPostFiles))
                    {
                        foreach ($jobPost->jobPostFiles as $jobPostFile)
                        {
                            if (file_exists($jobPostFile->file_url))
                            {
                                unlink($jobPostFile->file_url);
                            }
                        }
                    }
                    if (!empty($jobPost->applyJobs))
                    {
                        foreach ($jobPost->applyJobs as $applyJob)
                        {
                            if (file_exists($applyJob->file_url))
                            {
                                unlink($applyJob->file_url);
                            }
                        }
                    }
                    if (!empty($jobPost->jobPostQuestions))
                    {
                        $jobPost->jobPostQuestions->each->detech();
                    }
                }
            }

            if (!empty($user->skills))
            {
                $user->skills()->detech();
            }

            if (!empty($user->roles))
            {
                $user->roles()->detech();
            }
        });
    }

    public static function updateOrCreateUser($request, $userDetailsId, $id = null)
    {
        return User::updateOrCreate(['id' => $id], [
            'user_details_id'       => $userDetailsId,
            'name'                  => empty($id) ? $request->name : User::find($id)->name,
            'email'                 => $request->email,
            'password'              => !empty($request->password) ? Hash::make($request->password) : User::find($id)->password,
            'user_role_type'        => isset($id) ? User::find($id)->user_role_type : $request->user_role_type,
            'account_status'        => empty(User::first()) ? 1 : 0,
            'submit_status'         => isset($id) ? (User::find($id)->submit_status == 2 ? 2 : 1) : 0,
        ]);
//        self::$user = new User();
//        self::$user->user_details_id   = $userDetailsId;
//        self::$user->name   = $request->name;
//        self::$user->email   = $request->email;
//        if (!empty($request->password))
//        {
//            self::$user->password   = Hash::make($request->password);
//        }
//        self::$user->user_role_type = $request->user_role_type;
//        self::$user->account_status = empty(User::first()) ? 1 : 0;
//        self::$user->save();
//        return self::$user;
    }

    public function userDetails ()
    {
        return $this->belongsTo(UserDetail::class, 'user_details_id', 'id');
    }

    public function tradeLicenseFiles()
    {
        return $this->hasMany(TradeLicenseFile::class);
    }

    public function jobPosts()
    {
        return $this->hasMany(JobPost::class, 'client_user_id');
    }

    public function skills()
    {
        return $this->belongsToMany(Skill::class);
    }

    public function roles()
    {
        return $this->belongsToMany(Role::class);
    }

    public function applyJobs()
    {
        return $this->hasMany(ApplyJob::class, 'freelancer_user_id');
    }

//    public function ratedBy()
//    {
//        return $this->hasMany(Review::class, 'rated_by');
//    }
//
//    public function ratedTo()
//    {
//        return $this->hasMany(Review::class, 'rated_to');
//    }
}
